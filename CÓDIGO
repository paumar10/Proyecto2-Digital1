# include <Servo.h> //se carga la librería

//Prototipo funciones de posición de los servos
void posicion0();
void posicion1();
void posicion2();
void posicion3();
void posicion4();
void posicion5();
void imprimirposiciones();

Servo servo1; // se pone el servo que se va a controlar
Servo servo2;
Servo servo3; 
Servo servo4;
int pos=0; // se define la variable para guardar la posición del servo
int pot1=A0; // se conecta el potencionmetro
int pot2=A1;
int pot3=A2;
int pot4=A3;
int switch1=4;
int ledfa=3;
int ledpau=2;
int bota=11; 
int botb=12; 

int switchestado=0; //leer switch 


//Antirebote
bool estadoAnta=LOW;
bool estadoAntb=LOW;
bool after;
bool before;

//estados modo automático
typedef enum estados {s0, s1, s2, s3, s4, s5} estados;
estados estadoactual = s0;
estados estadofuturo = s0;

//Definimos variables de tiempo para la impresión de posición de los servos en el modo automático
const long tiempo = 1000;
unsigned long previousMillis = 0;

//Definimos variables de tiempo para la impresión de posición de los servos en el modo automático
const long tiempoboton = 10;
unsigned long previousMillisboton = 0;

void setup() {
Serial.begin(9600); // se inicia la comunicación serial 
servo1.attach(5); // se conecta el servo al pin 5
servo2.attach(6); 
servo3.attach(9); 
servo4.attach(10); 
pinMode(switch1, INPUT);
pinMode(ledfa, OUTPUT);
pinMode(ledpau, OUTPUT);
pinMode(bota, INPUT);
pinMode(botb, INPUT);
}

void loop() {
switchestado = digitalRead(switch1);

bool after = digitalRead(bota);
bool before = digitalRead(botb);

bool flancoA = (after == LOW && estadoAnta==HIGH); //NUEVO
bool flancoB = (before == LOW && estadoAntb == HIGH); //NUEVO

unsigned long currentMillisboton = millis();
  if (currentMillisboton - previousMillisboton >= tiempoboton) {
    estadoAnta = after;
    estadoAntb = before;
    previousMillisboton = currentMillisboton;
  }

//Configuracion del modo manual
if (switchestado==HIGH){
  digitalWrite(ledfa,HIGH);
  digitalWrite(ledpau,LOW);
  int valor1 = analogRead(pot1); //se lee el valor dado por el potenciometro 
  int valor2 = analogRead(pot2);
  int valor3 = analogRead(pot3);
  int valor4 = analogRead(pot4);
  valor1= map(valor1, 0, 1023, 0, 180); // se mapea el valor del servo, 180 es el máximo
  valor2= map(valor2, 0, 1023, 0, 180);
  valor3= map(valor3, 0, 1023, 0, 180);
  valor4= map(valor4, 0, 1023, 0, 180);
  servo1.write(valor1); 
  servo2.write(valor2); 
  servo3.write(valor3); 
  servo4.write(valor4); 
  Serial.print("Valor 1:");
  Serial.println(valor1);
  Serial.print("Valor 2:");
  Serial.println(valor2);
  Serial.print("Valor 3:");
  Serial.println(valor3);
  Serial.print("Valor 4:");
  Serial.println(valor4);
  delay(200);
}

//Configuracion del modo automatico
else {
  digitalWrite(ledfa, LOW);
  digitalWrite(ledpau, HIGH);

if (after==HIGH && before==HIGH){
    estadoactual=estadofuturo;
  }

  if (after==LOW && before==LOW){
    estadoactual=estadofuturo;
  }
unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= tiempo) {
    imprimirposiciones();
    previousMillis = currentMillis;
  }

  switch(estadoactual) {
    case s0: 
      if(flancoA == true) {
        estadofuturo= s1;
      }
      if(flancoB == true) {
        estadofuturo= s5;
      }
      break; 

    case s1: 
      if(flancoA == true) {
        estadofuturo= s2;
      }
      if (flancoB == true){
        estadofuturo= s0;
      }
      break;

    case s2: 
      if(flancoA == true) {
        estadofuturo= s3;
      }
      if(flancoB == true) {
        estadofuturo= s1;
      } 
      break;

    case s3: 
      if(flancoA == true) {
        estadofuturo= s4;
      }
      if (flancoB == true) {
        estadofuturo= s2;
      } 
      break;

    case s4: 
      if(flancoA == true) {
        estadofuturo= s5;
      }
      if(flancoB == true) {
        estadofuturo= s3;
      }  
      break;

    case s5: 
      if(flancoA == true) {
        estadofuturo= s0;
      }
      if(flancoB == true){
        estadofuturo= s4;
      }  
      break;
  }


  switch(estadoactual){
    case s0:
      posicion0();
      break;
    case s1:
      posicion1();
      break;
    case s2:
      posicion2();
      break;
    case s3:
      posicion3();
      break();
    case s4:
      posicion4();
      break;
    case s5:
      posicion5();
      break;
  }
}
}

void posicion0(){
  servo1.write(0);
  servo2.write(0);
  servo3.write(0);
  servo4.write(0);
}

void posicion1(){
  servo1.write(5);
  servo2.write(45);
  servo3.write(90);
  servo4.write(135);
}

void posicion2(){
  servo1.write(30);
  servo2.write(60);
  servo3.write(90);
  servo4.write(120);
}

void posicion3(){
  servo1.write(60);
  servo2.write(90);
  servo3.write(120);
  servo4.write(60);
}

void posicion4(){
  servo1.write(90);
  servo2.write(120);
  servo3.write(60);
  servo4.write(30);
}

void posicion5(){
  servo1.write(120);
  servo2.write(150);
  servo3.write(30);
  servo4.write(0);
}

void imprimirposiciones(){
  Serial.print("Posición del servo 1: ");
  Serial.println(servo1.read());
  Serial.print("Posición del servo 2: ");
  Serial.println(servo2.read());
  Serial.print("Posición del servo 3: ");
  Serial.println(servo3.read());
  Serial.print("Posición del servo 4: ");
  Serial.println(servo4.read());
}
}
